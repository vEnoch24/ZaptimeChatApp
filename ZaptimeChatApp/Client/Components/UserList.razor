@using System.Net.Http.Headers
@inject HttpClient Client

<h3>Users</h3>
<ul class="list-group list-group-flush">
    @if(Loading)
    {
        <li class="list-group-item"> 
            <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> Loading...
        </li>
    }
    else
    {
        @foreach (var user in Users)
        {
            <li class="list-group-item" @onclick="() => HandleUserClick(user)" 
                style="cursor: pointer; margin-top: 4px; background:#272b30; box-shadow: 0 1rem 3rem rgba(0, 0, 0, 0.175);">
                @user.Name
                <span class="badge rounded-pill bg-@(user.IsOnline ? "success" : "danger")">.</span>
            </li>
        }
    }
    
</ul>

@code {

    [Parameter]
    public EventCallback<UserDto> OnUserSelected { get; set; }

    [Parameter]
    public bool Loading { get; set; }

    [Parameter]
    public ICollection<UserDto> Users { get; set; } = default!;

    //protected async override Task OnInitializedAsync()
    //{
    //    if(!string.IsNullOrWhiteSpace(AuthenticationState.Token))
    //    {
    //        try
    //        {
    //            loading = true;

    //            Client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", AuthenticationState.Token);

    //            var userList = await Client.GetFromJsonAsync<ICollection<UserDto>>("api/users", JsonConverter.JsonSerializerOptions);
    //            if(userList is not null)
    //            {
    //                Users = userList;
    //            }
    //        }
    //        //catch (Exception)
    //        //{

    //        //}
    //        finally
    //        {
    //            loading = false;
    //        }  
    //    }
    //}

    private async Task HandleUserClick(UserDto user)
    {
        await OnUserSelected.InvokeAsync(user);
    }
}
