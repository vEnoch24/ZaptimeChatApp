@page "/"

@inject HttpClient HttpClient
@inject NavigationManager NavigationManager
@inject IJSRuntime JsRuntime


<PageTitle>Zaptime Chat - Login</PageTitle>

<div class="container">
    <div class="row">
        <div class="col-4"></div>
        <div class="col-4">
            
            <EditForm Model="LoginModel" OnValidSubmit="LoginAsync">
                <div class="card br-0 position-absolute top-50 start-50 translate-middle">
                    <div class="card-header text-center bg-primary">
                        <h2 class="text-white">Zaptime Chat - Login</h2>
                    </div>
                    <div class="card-body br-0">
                        <DataAnnotationsValidator />
                        @if (!string.IsNullOrWhiteSpace(errorMessage))
                        {
                            <p class="text-danger">@errorMessage</p>
                        }
                        <div class="mb-3">
                            <label class="form-label">Username</label>
                            <InputText @bind-Value="LoginModel.UserName" DisplayName="Username" class="form-control" placeholder="Enter Username"/>
                            <ValidationMessage For="() => LoginModel.UserName" />
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Password</label>
                            <InputText @bind-Value="LoginModel.Password" DisplayName="Password" type="password" class="form-control" placeholder="Enter Password" />
                            <ValidationMessage For="() => LoginModel.Password" />
                        </div>
                    </div>
                    
                    <div class="card-footer">
                        <div class="mb-3">
                            <NavLink href="register" class="btn btn-outline-primary float-end">Register</NavLink>
                            @if (_isBusy)
                            {
                                <button class="btn btn-success" type="button" disabled>
                                    <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                                    Loading...
                                </button>
                            }
                            else
                            {
                                <button type="submit" class="btn btn-success float-start">Login</button>
                            }
                            
                            <div class="clearfix"></div>
                        </div>
                    </div>
                </div>
            </EditForm>
        </div>
    </div>
</div>


@code {
    [CascadingParameter(Name = "AuthenticationState")]
    public AuthenticationState AuthenticationState { get; set; }

    private LoginDto LoginModel { get; set; } = new();
    private bool _isBusy = false;
    private string? errorMessage = null;

    private async Task LoginAsync()
    {
        try
        {
            _isBusy = true;
            var response = await HttpClient.PostAsJsonAsync<LoginDto>("api/account/login", LoginModel);
            if(response.IsSuccessStatusCode)
            {
                var content = await response.Content.ReadAsStringAsync();
                var authResult = JsonConverter.Deserialize<AuthResponseDto>(content);

                var serialized = JsonConverter.Serialize(authResult);
                await JsRuntime.InvokeVoidAsync("window.setToStorage", AuthenticationState.AuthStoreKey, serialized);
                //NavigationManager.NavigateTo("/chat");
                AuthenticationState.LoadState(authResult);
            }
            else
            {
                string? errorContent = null;
                try
                {
                    errorContent = await response.Content.ReadAsStringAsync();
                }
                catch
                {

                }
                if(string.IsNullOrWhiteSpace(errorContent))
                {
                    errorContent = $"Error {response.StatusCode} - ${response.ReasonPhrase}";
                }
                _isBusy = false;
                errorMessage = errorContent;
            }
        }
        catch(Exception ex)
        {
            errorMessage = ex.Message;
            _isBusy = false;
        }
        
    }

}