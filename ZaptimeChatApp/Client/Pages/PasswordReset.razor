@page "/password-reset"

@using ZaptimeChatApp.Shared.RequestPayload;
@using ZaptimeChatApp.Shared.Shared;

@inject HttpClient HttpClient
@inject NavigationManager NavigationManager
@inject IJSRuntime JsRuntime
@inject UserState UserState

<PageTitle>Zaptime Chat - Password Reset</PageTitle>

<div class="container">
    <div class="row">
        <div class="col-4"></div>
        <div class="col-4">
            
            <EditForm Model="ResetModel" >
                <div class="card br-0 position-absolute top-50 start-50 translate-middle">
                    <div class="card-header text-center bg-primary">
                        <h2 class="text-white">Zaptime Chat - Password Reset</h2>
                    </div>
                    <div class="card-body br-0">
                        <DataAnnotationsValidator />
                        @if (!string.IsNullOrWhiteSpace(errorMessage))
                        {
                            <p class="text-danger">@errorMessage</p>
                        }
                        @if (!string.IsNullOrWhiteSpace(infoMessage))
                        {
                            <div class="header d-flex justify-content-between bg-success">
                                <span class="text-white">@infoMessage</span>
                            </div>
                        }
                        <div class="mb-3">
                            <label class="form-label">New Password</label>
                            <InputText @bind-Value="ResetModel.Password" DisplayName="NewPassword" type="password" class="form-control" placeholder="Enter New Password" />
                            <ValidationMessage For="() => ResetModel.Password" />
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Confirm Password</label>
                            <InputText @bind-Value="ResetModel.confirmPassword" DisplayName="ConfirmPassword" type="password" class="form-control" placeholder="Confirm Password" />
                            <ValidationMessage For="() => ResetModel.confirmPassword" />
                        </div>
                    </div>
                    
                    <div class="card-footer">
                        <div class="mb-3">
                            <NavLink href="/" class="btn btn-outline-primary float-end">Login</NavLink>

                            <button @onclick="ResetPasswordAsync" class="btn btn-success float-start">Reset</button>
                            
                            <div class="clearfix"></div>
                        </div>
                    </div>
                </div>
            </EditForm>
        </div>
    </div>
</div>

@code {
    private ResetPasswordRequest ResetModel = new();

    private string? errorMessage = null;
    private string? infoMessage = null;
    private bool _isBusy = false;

    private async Task ResetPasswordAsync()
    {
        try
        {
            var user = await HttpClient.GetFromJsonAsync<UserResetDto>($"api/account/get-user/{UserState.UserName}");

            await JsRuntime.InvokeVoidAsync("console.log", user);


            var resetRequest = new ResetPasswordRequest()
            {
                Password = ResetModel.Password,
                confirmPassword = ResetModel.confirmPassword,
                Token = user.PasswordRestToken,
            };


            _isBusy = true;
            var response = await HttpClient.PostAsJsonAsync("api/account/reset-password", resetRequest, JsonConverter.JsonSerializerOptions);
            if(response.IsSuccessStatusCode)
            {
                infoMessage = "Password Reset Successful";
            }
            else
            {
                string? errorContent = null;
                try
                {
                    errorContent = await response.Content.ReadAsStringAsync();
                }
                catch
                {

                }
                if (string.IsNullOrWhiteSpace(errorContent))
                {
                    errorContent = $"Error {response.StatusCode} - ${response.ReasonPhrase}";
                }
                _isBusy = false;
                errorMessage = errorContent;
            }
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
            _isBusy = false;
        }
    }
}
