@page "/chat"
@using Microsoft.AspNetCore.SignalR.Client;
@using System.Net.Http.Headers
@inject HttpClient Client

@implements IAsyncDisposable

@inject NavigationManager NavigationManager
@inject IJSRuntime JsRuntime


<div class="container-fluid">
    <div class="card">
        <div class="card-header br-0 bg-primary text-white">
            <div class="row">
                <div class="col">
                    <h2>Zaptime Chat</h2>
                </div>
                <div class="col">
                    <button type="button" class="btn btn-warning float-end" @onclick="HandleLogout" >Logout</button>
                    <label class="float-end me-2 mt-2 topbar-name">Welcome @AuthenticationState.User.Name</label>
                    
                </div>
            </div>
        </div>
        <div class="card-body messages-window bg-light d-flex">
            <div class="row" style="flex: 1">
                <div class="col-sm-2 col-3">
                    <ChatsList Chats="Chats"  OnUserSelected="OnUserSelected"/>
                </div>
                @*<div class="col-sm-8 col-6 d-flex justify-content-center align-items-center" style="background-color: #f4ecff;">*@
                <div class="col-sm-8 col-6 d-flex px-0" style="background-color: #f4ecff;">
                    <ChatDetails SelectedUser="selectedUser" OnCancel="HandleChatDetailsCancel" />
                </div>
                <div class="col-sm-2 col-3">
                   <UserList Loading="loadingUsers" Users="Users" OnUserSelected="OnUserSelected" />
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    [CascadingParameter(Name = "AuthenticationState")]
    public AuthenticationState AuthenticationState { get; set; }

    private HubConnection? hubConnection;

    private bool loadingUsers = false;
    public ICollection<UserDto> Users { get; set; } = new HashSet<UserDto>();
    public ICollection<UserDto> Chats { get; set; } = new HashSet<UserDto>();

    private UserDto? selectedUser =  null;

    protected override async void OnInitialized()
    {
        base.OnInitialized();

        if(!AuthenticationState.IsAuthenticated)
        {
            NavigationManager.NavigateTo("/");
        }
        else
        {
            hubConnection = ConfigureHubConnection();

            loadingUsers = true;
            var userListTask = GetClient().GetFromJsonAsync<ICollection<UserDto>>("api/users", JsonConverter.JsonSerializerOptions);

            await hubConnection.StartAsync();

            var userList = await userListTask;
            if(userList is not null)
            {
                Users = userList;
            }

            loadingUsers = false;
            await hubConnection.SendAsync(nameof(IZaptimeChatHubServer.SetUserOnline), AuthenticationState.User);
            StateHasChanged();
        }
    }

    private HttpClient GetClient()
    {
        Client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", AuthenticationState.Token);
        return Client;
    }

    private async Task OnUserSelected(UserDto user)
    {
        selectedUser = user;

        var selectedChatUser = Chats.FirstOrDefault(c => c.IsSelected);
        if(selectedChatUser is not null)
        {
            selectedChatUser.IsSelected = false;
        }


        var chatUser = Chats.FirstOrDefault(c => c.Id == user.Id);
        if(chatUser is null)
        {
            user.IsSelected = true;
            Chats.Add(user);
        }
        else
        {
            chatUser.IsSelected = true;
        }
    } 

    private async Task HandleChatDetailsCancel(bool shouldRemoveFromChatsList)
    {
        if(shouldRemoveFromChatsList)
        {
            Chats.Remove(selectedUser);
        }
    }

    private async Task HandleLogout()
    {
        await JsRuntime.InvokeVoidAsync("window.removeFromStorage", AuthenticationState.AuthStoreKey);
        AuthenticationState.UnLoadState();
        //NavigationManager.NavigateTo("/");
    }

    private HubConnection ConfigureHubConnection()
    {
        var hubConnection = new HubConnectionBuilder()
                            .WithUrl(NavigationManager.ToAbsoluteUri("/hubs/zaptime-chat"), 
                                options => options.AccessTokenProvider = () => Task.FromResult(AuthenticationState.Token))
                            .Build();

        hubConnection.On<UserDto>(nameof(IZaptimeChatHubClient.UserConnected), (newUser) =>
        {
            Users.Add(newUser);
            StateHasChanged();
        });

        hubConnection.On<ICollection<UserDto>>(nameof(IZaptimeChatHubClient.OnlineUsersList), (onlineUsers) =>
        {
            //Users = userNames;
            foreach(var user in Users)
            {
                if(onlineUsers.Any(u => u.Id == user.Id))
                {
                    user.IsOnline = true;
                }
            }

            StateHasChanged();
        });

        hubConnection.On<Guid>(nameof(IZaptimeChatHubClient.UserIsOnline), (userId) =>
        {
            var user = Users.FirstOrDefault(u => u.Id == userId);
            if(user is not null)
            {
                user.IsOnline = true;
                StateHasChanged();
            }
        });

        return hubConnection;
    }

    public async ValueTask DisposeAsync()
    {
        if(hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}
