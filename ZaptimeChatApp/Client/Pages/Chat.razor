@page "/chat"
@using Microsoft.AspNetCore.SignalR.Client;
@using System.Net.Http.Headers
@using System.IdentityModel.Tokens.Jwt;
@using System.Timers;

@inject HttpClient Client

@implements IAsyncDisposable

@inject NavigationManager NavigationManager
@inject IJSRuntime JsRuntime
@inject IToastService toastService


<div class="container-fluid">
    <div class="card br-0 mt-1">
        <div class="card-header br-0 bg-secondary text-white">
            <div class="row">
                <div class="col">
                    <h2>Zaptime Chat</h2>
                </div>    
                

                <div class="col">
                    
                    <RadzenMenu class="float-end">
                        <RadzenMenuItem Text="@AuthenticationState.User.Name" Icon="person">
                            <RadzenMenuItem Text="Logout" Click="HandleLogout" Icon="logout"></RadzenMenuItem>
                            <RadzenMenuItem Text="Menu" Path="menu" Icon="line_weight"></RadzenMenuItem>
                        </RadzenMenuItem>
                    </RadzenMenu>

                    @*<button type="button" class="btn btn-warning float-end" @onclick="HandleLogout" >Logout</button>*@
                    <label class="float-end me-2 mt-2 topbar-name"> @greeting </label>
                </div>
            </div>
        </div>
        <div class="card-body messages-window bg-primary d-flex">
            <div class="row" style="flex: 1">
                <div class="col-sm-2 col-3">
                    <ChatsList Loading="loadingUsers" Chats="Chats" OnUserSelected="OnUserSelected" />
                </div>
                @*<div class="col-sm-8 col-6 d-flex justify-content-center align-items-center" style="background-color: #f4ecff;">*@
                <div class="col-sm-8 col-6 d-flex px-0" >
                    <ChatDetails SelectedUser="selectedUser" 
                        NewIncomingMessage="@newIncomingMessage" 
                        OnIncomingMessageReceived="() => newIncomingMessage = null" 
                        OnCancel="HandleChatDetailsCancel" />
                </div>
                <div class="col-sm-2 col-3">
                   <UserList Loading="loadingUsers" Users="Users" OnUserSelected="OnUserSelected" />
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    [CascadingParameter(Name = "AuthenticationState")]
    public AuthenticationState AuthenticationState { get; set; }

    private HubConnection? hubConnection;

    private bool loadingUsers = false;
    public ICollection<UserDto> Users { get; set; } = new HashSet<UserDto>();
    public IList<UserDto> Chats { get; set; } = new List<UserDto>();

    private UserDto? selectedUser =  null;
    private MessageDto? newIncomingMessage = null;

    private string greeting;
    private Timer timer;

    

    private async Task<bool> IsTokenExpiredAsync()
    {
        var jwt = new JwtSecurityToken(AuthenticationState.Token);
        if (jwt.ValidTo <= DateTime.Now)
        {
            return true;
        }

        return false;
    }

    private void TimerElapsed(object sender, ElapsedEventArgs e)
    {
        UpdateGreeting();
    }

    private void UpdateGreeting()
    {
        var newGreeting = DateTime.Now.Hour < 12 ? "Good morning" : "Good afternoon";
        if (greeting != newGreeting)
        {
            greeting = newGreeting;
            InvokeAsync(StateHasChanged); // Notify the UI to re-render
        }
    }

    protected override async void OnInitialized()
    {
        base.OnInitialized();

        UpdateGreeting();

        timer = new Timer(60000); // Check every minute
        timer.Elapsed += TimerElapsed;
        timer.Start();

        if(!AuthenticationState.IsAuthenticated)
        {
            NavigationManager.NavigateTo("/");
        }
        else
        {
            if(!await IsTokenExpiredAsync())
            {
                hubConnection = ConfigureHubConnection();

                loadingUsers = true;
                var userListTask = GetClient().GetFromJsonAsync<ICollection<UserDto>>("api/users", JsonConverter.JsonSerializerOptions);
                var chatListTask = GetClient().GetFromJsonAsync<IList<UserDto>>("api/users/chats", JsonConverter.JsonSerializerOptions);

                await hubConnection.StartAsync();

                var userList = await userListTask;
                if (userList is not null)
                {
                    Users = userList;
                }

                var chatList = await chatListTask;
                if (chatList is not null)
                {
                    Chats = chatList;
                }

                loadingUsers = false;
                await hubConnection.SendAsync(nameof(IZaptimeChatHubServer.SetUserOnline), AuthenticationState.User);
                StateHasChanged();
            }

        }
    }

    private HttpClient GetClient()
    {
        Client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", AuthenticationState.Token);
        return Client;
    }

    private async Task OnUserSelected(UserDto user)
    {
        selectedUser = user;

        var selectedChatUser = Chats.FirstOrDefault(c => c.IsSelected);
        if(selectedChatUser is not null)
        {
            selectedChatUser.IsSelected = false;
        }


        var chatUser = Chats.FirstOrDefault(c => c.Id == user.Id);
        if(chatUser is null)
        {
            user.IsSelected = true;
            Chats.Add(user);
        }
        else
        {
            chatUser.IsSelected = true;
        }

        var response = await GetClient().PutAsJsonAsync($"api/message/read-message/{user.Id}", JsonConverter.JsonSerializerOptions);
        if (response.IsSuccessStatusCode)
        {
            await JsRuntime.InvokeVoidAsync("console.log", "State Changed");
            StateHasChanged();
        }
    } 

    private async Task HandleChatDetailsCancel(bool shouldRemoveFromChatsList)
    {
        if(shouldRemoveFromChatsList)
        {
            Chats.Remove(selectedUser);
        }
    }

    private async Task HandleLogout()
    {
        await hubConnection.SendAsync(nameof(IZaptimeChatHubServer.SetUserOffline), AuthenticationState.User);
        //await hubConnection.InvokeAsync("SetUserOffline", Users);
        await JsRuntime.InvokeVoidAsync("window.removeFromStorage", AuthenticationState.AuthStoreKey);
        AuthenticationState.UnLoadState();
        //NavigationManager.NavigateTo("/");
    }

    private HubConnection ConfigureHubConnection()
    {
        var hubConnection = new HubConnectionBuilder()
                            .WithUrl(NavigationManager.ToAbsoluteUri("/hubs/zaptime-chat"), 
                                options => options.AccessTokenProvider = () => Task.FromResult(AuthenticationState.Token))
                            .Build();

        hubConnection.On<UserDto>(nameof(IZaptimeChatHubClient.UserConnected), (newUser) =>
        {
            Users.Add(newUser);
            StateHasChanged();
        });

        hubConnection.On<ICollection<UserDto>>(nameof(IZaptimeChatHubClient.OnlineUsersList), (onlineUsers) =>
        {
            //Users = userNames;
            foreach(var user in Users)
            {
                if(onlineUsers.Any(u => u.Id == user.Id))
                {
                    user.IsOnline = true;
                }
            }

            StateHasChanged();
        });

        hubConnection.On<Guid>(nameof(IZaptimeChatHubClient.UserIsOnline), (userId) =>
        {
            var user = Users.FirstOrDefault(u => u.Id == userId);
            if(user is not null)
            {
                user.IsOnline = true;
                toastService.ShowInfo($"{user.Name} is online");
                StateHasChanged();
            }
        });
        hubConnection.On<Guid>(nameof(IZaptimeChatHubClient.UserIsOffline), (userId) =>
        {
            var user = Users.FirstOrDefault(u => u.Id == userId);
            if (user is not null)
            {
                user.IsOnline = false;
                toastService.ShowInfo($"{user.Name} is offline");
                StateHasChanged();
            }
        });

        hubConnection.On<MessageDto>(nameof(IZaptimeChatHubClient.MessageReceived), (messageDto) =>
        {
            var fromUser = Users.FirstOrDefault(u => u.Id == messageDto.FromUserId);

            if (!Chats.Any(c => c.Id == messageDto.FromUserId))
            {
                Chats.Insert(0, fromUser!);
            }
            else
            {
                if (selectedUser?.Id == messageDto.FromUserId)
                {
                    //Append the message
                    //newIncomingMessage = new MessageDto(messageDto.ToUserId, messageDto.FromUserId, messageDto.Message);
                    //messageDto = messageDto with { Status = "Seen" };
                    newIncomingMessage = messageDto;
                }
                else
                {
                    messageDto = messageDto with { Status = "Sent" };
                }
            }
            StateHasChanged();
        });

        return hubConnection;
    }

    public async ValueTask DisposeAsync()
    {
        if(hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
        timer?.Dispose();
    }
}
